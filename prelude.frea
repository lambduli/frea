module Main where

{ data () = ()

-- (\ x -> let { plus = \ a b -> ((#+) (a, b)) ; numnum = (plus x 1) } in numnum)

; data Bool
    = True
    | False

; data Either a b
    = Left a
    | Right b

; data Maybe a
    = Nothing
    | Just a

; data List a
    = []
    | a : (List a)

-- ; type Infinite a = a a

; type String = List Char

-- ; type A = B -- BAD CYCLE
-- ; type B = A -- BAD CYCLE

-- ; type Foo = Foo -- cycle

-- ; type Bar = Either Bar Int -- cycle

-- ; type Rehtie a b = Either b a

-- ; type Identity a = a

-- ; type AAA a b = BBB b a -- BAD CYCLE
-- ; type BBB x y = AAA y x -- BAD CYCLE

; type Klo a b = Pop (Eith a) b

; type Pop t p = t p

; type Eith a b = Either a b

-- ; type Eith g h = Either g h

-- ; data Test a b c = One -- (a b c)

-- ; data ConContainer a b
--    = Container (a b)

-- ; int :: Identity Int
-- ; int = 23

-- ; str :: String
-- ; str = "hello world!"

-- ; foobar :: Rehtie Int Char
-- ; foobar = bar
-- ; bar :: Either Char Int
-- ; bar = Left 'a'


; concat :: String -> String -> String
; concat left right = left ++ right

; tt :: Klo Char Int
; tt = Left 'a'
; oo :: Klo Char String
; oo = ll
; ll :: Either Char String
; ll = Right "hello"

; (&&) :: Bool -> Bool -> Bool
; a && b = (which-Bool a
            b
            False)

; (||) :: Bool -> Bool -> Bool
; a || b = (which-Bool a
            True
            b)

; (==) :: h -> h -> Bool
; a == b  = (#= (a, b))

; a < b  = (#< (a, b))

; a > b  = (#> (a, b))

; a + b  = (#+ (a, b))

; a +. b  = (#+. (a, b))

; a - b  = (#- (a, b))

; a -. b  = (#-. (a, b))

; a * b  = (#* (a, b))

; a *. b  = (#*. (a, b))

; a `div` b = (#div (a, b))

; a / b  = (#/ (a, b))

; nil? a  = (which-List a
              True
              (\ h t -> False))

; show a = ((#show) a)

; undefined = undefined

; lst !! ix = if (ix == 0)
              then (which-List lst Nothing (\ h t -> (Just h)))
              else (which-List lst Nothing (\ h t -> (t !! (ix - 1))))

; fst a  = (#fst a)
; inj1 = fst (23, 42) -- incorrect type -- it is correct now

; snd a  = (#snd a)

; la ++ lb = (which-List la
              lb
              (\ ha ta -> (ha : (ta ++ lb))))

; head lst = (which-List lst
              Nothing
              (\ h t -> (Just h)))

; tail lst = (which-List lst
              Nothing
              (\ h t -> (Just t)))

; show-List list = (which-List list
                    "[]"
                    ( \ head tail -> ( ((show head) ++ " : ") ++ (show-List tail) ) ))

; map fn lst = (which-List lst
              []
              (\ h t -> ((fn h) : (map fn t)) ))

; show-Maybe m = (which-Maybe m
                "Nothing"
                (\ v -> (show v)))

; fact n = if n == 0 then 1 else n * (fact (n - 1))

; test = 'c' == 'a' -- just for the future "regression prevention"

-- I would like to fix the following bug in the future

; wrong :: Int -> a
; wrong n = badbad n

; badbad o = 23

; plus a b = a + b
; numnum = plus 23 42 -- this will have an incorrect type -- it is correct now

; add = (+)
; munmun = add 23 42 -- this will have an incorrect type -- it is correct now

; nnum = #+ (23, 42)

}